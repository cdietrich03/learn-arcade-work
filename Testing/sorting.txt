1. Write code to swap the values 25 and 40.

my_list = [55, 41, 52, 68, 45, 27, 40, 25, 37, 26]

temp = my_list[6]
my_list[6] = my_list[7]
my_list[7] = temp

2. Write code to swap the values 2 and 27.

my_list = [27, 32, 18,  2, 11, 57, 14, 38, 19, 91]

temp = my_list[0]
my_list[0] = my_list[3]
my_list[3] = temp

3. Why does the following code not work? Explain it, don't just list working code.

my_list = [70, 32, 98, 88, 92, 36, 81, 83, 87, 66]
temp = my_list[0]
my_list[1] = my_list[0]
my_list[0] = temp

This code doesn't work because the code is setting the temp equal to 70 originally,
and then it is setting the 1st position (70) to 32. The last line then resets the first position to 70
meaning that this code just sets position one (0) and two (1) to 70

4. Show how the following numbers can be sorted using the selection sort. Show the numbers after each iteration of the outer loop, similar to what is shown in the book. I am NOT looking for a copy of the code to do the sort. If you include any code for problems 4-7 you are doing it wrong.

97   74    8   98   47   62   12   11    0   60
1. 0 74 8 98 47 62 12 11 97 60
2. 0 8 74 98 47 62 12 11 97 60
3. 0 8 11 98 47 62 12 74 97 60
4. 0 8 11 12 47 62 98 74 97 60
5. 0 8 11 12 47 62 98 74 97 60
6. 0 8 11 12 47 60 98 74 97 62
7. 0 8 11 12 47 60 62 74 97 98
8. 0 8 11 12 47 60 62 74 97 98
9. 0 8 11 12 47 60 62 74 97 98


5. Show how the following numbers can be sorted using the selection sort:

74   92   18   47   40   58    0   36   29   25
1. 0 92 18 47 40 58 74 36 29 25
2. 0 18 92 47 40 58 74 36 29 25
3. 0 18 25 47 40 58 74 36 29 92
4. 0 18 25 29 40 58 74 36 47 92
5. 0 18 25 29 36 58 74 40 47 92
6. 0 18 25 29 36 40 74 58 47 92
7. 0 18 25 29 36 40 47 58 74 92
8. 0 18 25 29 36 40 47 58 74 92
9. 0 18 25 29 36 40 47 58 74 92


6. Show how the following numbers can be sorted using the INSERTION sort. (Note: If you think the 0 gets immediately sorted into position, you are doing it wrong. Go back and re-read how this sort works.)

74   92   18   47   40   58    0   36   29   25
1. 74 92 18 47 40 58 0 36 29 25
2. 18 74 92 47 40 58 0 36 29 25
3. 18 47 74 92 40 58 0 36 29 25
4. 18 40 47 74 92 58 0 36 29 25
5. 18 40 47 58 74 92 0 36 29 25
6. 0 18 40 47 58 74 92 36 29 25
7. 0 18 36 40 47 58 74 92 29 25
8. 0 18 29 36 40 47 58 74 92 25
9. 0 18 25 29 36 40 47 58 74 92


7. Show how the following numbers can be sorted using the insertion sort:

    37   11   14   50   24    7   17   88   99    9
    1. 37 11 14 50 24 7 17 88 99 9
    2. 11 37 14 50 24 7 17 88 99 9
    3. 11 14 37 50 24 7 17 88 99 9
    4. 11 14 24 37 50 7 17 88 99 9
    5. 7 11 14 24 37 50 17 88 99 9
    6. 7 11 14 17 24 37 50 88 99 9
    7. 7 11 14 17 24 37 50 88 99 9
    8. 7 11 14 17 24 37 50 88 99 9
    9. 7 9 11 14 17 24 37 50 88 99

8. Explain what `min_pos` does in the selection sort.
Min_pos finds the smallest value in the list and in the code we set the value equal to the current position in order to "swap" values.

9. Explain what `cur_pos` does in the selection sort.
The current position depicts which position we are at in comparison to what has already been sorted.

10. Explain what `scan_pos` does in the selection sort.
The scan_pos goes through each position in the list in relation to the current position and checks to see if that value is less than the smallest position. If the scan_pos is smaller, it sets the min_pos to this value.

11. Explain what `key_pos` and `key_value` are in the insertion sort.
key_pos is the divider in the list between the sorted and the not sorted values. key_value is the value that is currently being looked at for values greater than itself before being placed in its new position

12. Explain `scan_pos` in the insertion sort.
scan_pos in insertion sort looks at the values to the left of the key_value and checks to see which of those values are greater than key_value.

13. Look at the example sort program at the very end of this chapter:

https://learn.arcade.academy/en/latest/chapters/30_sorting/sorting.html


Modify the sorts to print the number of times the inside loop is run, and the number of times the outside loop is run. Modify the program to work with a list of 100. Paste the code you used here. Run the program and list the numbers you got here. (DON'T FORGET TO INCLUDE THE RESULTS!) Inside loop for selection sort should be about 5,000, and insertion sort 2,500. Double-check if you don't get numbers close to these.

To turn in: Upload your .txt file. Just drag it from PyCharm to the upload for the assignment. (BUT WAIT! Make sure you include the results from #13, and not just the program.)

Alternatively, turn in a link to the github for the worksheet.